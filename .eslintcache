[{"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\constants.ts":"1","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\fact.ts":"2","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\facts.ts":"3","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\index.ts":"4","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\requests.ts":"5","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\types.ts":"6","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\fact.test.ts":"7","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\facts.test.ts":"8","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\requests.test.ts":"9"},{"size":78,"mtime":1666973743381,"results":"10","hashOfConfig":"11"},{"size":405,"mtime":1666973743421,"results":"12","hashOfConfig":"11"},{"size":885,"mtime":1666973743475,"results":"13","hashOfConfig":"11"},{"size":615,"mtime":1666973743520,"results":"14","hashOfConfig":"11"},{"size":960,"mtime":1666973743565,"results":"15","hashOfConfig":"11"},{"size":182,"mtime":1666973743602,"results":"16","hashOfConfig":"11"},{"size":1444,"mtime":1666973743659,"results":"17","hashOfConfig":"11"},{"size":1962,"mtime":1666973743705,"results":"18","hashOfConfig":"11"},{"size":1845,"mtime":1666973743749,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"im09z3",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"49"},"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\constants.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\fact.ts",["50","51","52"],[],"import { FACT } from './constants';\nimport { getFact } from './requests';\nimport { FactDefinition } from './types';\n\nexport const validateLenght = async ():Promise<boolean> => {\n    try {\n        const received:FactDefinition | undefined = await getFact(FACT);\n        if(!received) throw Error\n        return received.fact.length === received.length;\n    } catch (error) {\n        return false;\n    }\n}\n\n","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\facts.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\index.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\requests.ts",["53"],[],"\"use strict\";\nimport { BASE_URL } from \"./constants\";\nimport axios from 'axios';\nimport { FactDefinition, FactsDefinition } from \"./types\";\n\n\n\n/**\n * Request cats fact service\n * @return FactDefinition or undefined\n * @FactDefinition fact: string; length: number;\n */\nexport const getFact = async (path: string): Promise<FactDefinition | undefined> => {\n    const response = await axios.get(`${BASE_URL}${path}`);\n    if (isResponseValid(response.status)) {\n        return response.data as FactDefinition;\n    }\n    return undefined;\n}\n\n/**\n * Request a list of cat facts\n * @return FactsDefinition or undefined\n */\nexport const getFactsList = async (): Promise<FactsDefinition | undefined> => {\n    const response = await axios.get(`${BASE_URL}/facts`);\n    if (isResponseValid(response.status)) {\n        return response.data as FactsDefinition;\n    }\n    return undefined;\n}\n\nexport const isResponseValid = (status: number) => {\n    return status === 200;\n}","C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\types.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\fact.test.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\facts.test.ts",[],[],"C:\\Users\\2000077554\\Desktop\\DEvOps\\CICD_Curse-badSource\\src\\__tests__\\requests.test.ts",["54"],[],"import {isResponseValid, getFact, getFactsList} from \"../requests\";\nimport axios from 'axios';\nimport { FactsDefinition } from \"../types\";\n\ndescribe(\"isResponseValid\", () => {\n    it(\"should return true when status is 200\", () => {\n        expect(isResponseValid(200)).toBeTruthy();\n        expect(isResponseValid(202)).toBeFalsy();\n        expect(isResponseValid(404)).toBeFalsy();\n    });\n});\n\ndescribe(\"getFact\", () => {\n    it(\"should return FactDefinition\", async () => {\n        const resp = {  status: 200,  data: {fact: \"mock fact\", length: 9}}\n        jest.spyOn(axios, \"get\").mockImplementationOnce(() => Promise.resolve(resp))\n        const fact = await getFact(\"valid path\");\n        expect(fact).toStrictEqual(resp.data);\n    });\n    it(\"should return undefined when response is invalid\", async () => {\n        const resp = {  status: 404 }\n        jest.spyOn(axios, \"get\").mockImplementationOnce(() => Promise.resolve(resp))\n        const fact = await getFact(\"valid path\");\n        expect(fact).toBeUndefined();\n    });\n})\ndescribe(\"getFactsList\", () => {\n    const list: FactsDefinition = {\n        current_page: 1,\n        data: [{ fact: \"cats are cute\", length: 13 }, { fact: \"fact 2\", length: 6 }, { fact: \"fact 3\", length: 6 }],\n        per_page: 3,\n    }\n    it(\"should return FactsDefinition\", async () => {\n        const resp = {  status: 200,  data: list}\n        jest.spyOn(axios, \"get\").mockImplementationOnce(() => Promise.resolve(resp))\n        const fact = await getFactsList();\n        expect(fact).toStrictEqual(list);\n    });\n    it(\"should return undefined when response is invalid\", async () => {\n        const resp = {  status: 404 }\n        jest.spyOn(axios, \"get\").mockImplementationOnce(() => Promise.resolve(resp))\n        const fact = await getFactsList();\n        expect(fact).toBeUndefined();\n    });\n})",{"ruleId":"55","severity":2,"message":"56","line":1,"column":22,"nodeType":"57","messageId":"58","endLine":1,"endColumn":35,"fix":"59"},{"ruleId":"55","severity":2,"message":"56","line":2,"column":25,"nodeType":"57","messageId":"58","endLine":2,"endColumn":37,"fix":"60"},{"ruleId":"55","severity":2,"message":"56","line":3,"column":32,"nodeType":"57","messageId":"58","endLine":3,"endColumn":41,"fix":"61"},{"ruleId":"55","severity":2,"message":"56","line":3,"column":19,"nodeType":"57","messageId":"58","endLine":3,"endColumn":26,"fix":"62"},{"ruleId":"55","severity":2,"message":"56","line":2,"column":19,"nodeType":"57","messageId":"58","endLine":2,"endColumn":26,"fix":"63"},"quotes","Strings must use doublequote.","Literal","wrongQuotes",{"range":"64","text":"65"},{"range":"66","text":"67"},{"range":"68","text":"69"},{"range":"70","text":"71"},{"range":"72","text":"71"},[21,34],"\"./constants\"",[60,72],"\"./requests\"",[105,114],"\"./types\"",[72,79],"\"axios\"",[86,93]]